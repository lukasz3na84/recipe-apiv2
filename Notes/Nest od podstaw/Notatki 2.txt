===== TypeORM ========

npm i --save @nestjs/typeorm typeorm mysql2

Po instalacji w app.module.ts (głównym pliku module) dodajemy wpis w imports:
TypeormModule.forRoot() gdzie w parametrach wpisujemy parametry do połaczenia:
TypeOrmModule.forRoot({
      type: 'mysql',
      host: 'localhost',
      database: 'recipe',
      username: 'root',
      port: 3306,
      autoLoadEntities: true,
      synchronize: true,
    })
Powyższe to ustawienia po XAMPP'a

synchronize: true - automatyczna synchronizacja po zapisie w encjach, nie ma produkcji, bo tam bedziemy robić migracje

Kolejnym krokiem jest przerobienie interfejsu Dish, Product na klasę opisująca encję.

- zmiana interface na class
- @Entity() itd.

W Module recipe.module.ts dopisujemy featcher:
imports: [TypeOrmModule.forFeature([Product])],

Różnice między dwoma modelami danych DataMaper i ActiveRecord:
https://gemini.google.com/app/e9457cddee80cb83?hl=pl
My wybieramy ActiveRecord - rozszerzamy encję o BaseEntity (mamy dostep wtedy do save, create etc.)


======= Relacje w bazie danych =======
One to many
Załozenie: Jedno Danie (Dish) mze wystować w wielu produktach lub jeden produkt może wystapićw kilku daniach

Dish.ts
@OneToMany(() => Product, (product: Product) => product.dish)
Arroy function zwraca na "Product": () => Product
, z produktu wybieramy sobie dish: (product: Product) => product.dish

Product.ts
podmieniamy zapis:
  @Column({ type: 'int' }) // TODO make a Foreign index for Dish
  dishId: number;

  na relację:
  @ManyToOne(() => Dish, (dish: Dish) => dish.products)
  dish: Dish

  Aby pobrało nam produkty podczas odczytywania dań (Dish) przy find() / finOne() trzeba dopisać relations: ['products']

  Aby TypeORM wpisał dishID, musimy to danie wyszukać:
 
  async creteProduct(product: CreateProductDto): Promise<Product> {
    const newProduct = new Product();
    Object.assign(newProduct, product);
    // wyszukanie dania i przypisania go do obiektu
    newProduct.dish = await this.dishService.getOneDishById(product.dishId);
    await newProduct.save();
    return newProduct;
  }

W Active Record chodzi o to, że tworzymy instancję (encję) np. 
const newDish = new Dish() 
na podstawie DTO, rozszerzamy ją za pomocą np. Object.assign()
i potem zapisujemy save()

Jest to cięzkie do testowania bo encja Dish (czy tez Produkt) jest połaczona sztywno z serwisem. Dlatego w dalszej części przechodzimy do "Dependency injection"
dish.service.ts :

constructor(@InjectRepository(Dish) private dishRepository: Repository<Dish>)

W metodzie create, dodajemy w metodzie save() obiekt, który chcemy zapisać (tutaj dish: CreateDishDto)
W metodzie "update" jest zwracany "UpdateResult" - można pominąc jawne przypisanie zwrotki.

Przy tworzeniu nowego produktu, potrzebujemy nowego produktu wcesniej aby przypisac mu dish.
Dlatego też tworzymy nowy produkt poprzez repozytorium podając w create(product) z Dto:
  async creteProduct(product: CreateProductDto): Promise<Product> {
    const newProduct = await this.productRepository.create(product);
    newProduct.dish = await this.dishService.getOneDishById(product.dishId);
    return await this.productRepository.save(newProduct);
  }

Po refactoringu kodu, usuwamy @Inject(forwardRef...) bo juz nie sa od siebie zależne.
