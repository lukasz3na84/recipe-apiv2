Instalacja NestJs:
npm install -g @nestjs/cli

Utworzenie projektu aplikacji NestJs:
nest new recipe-apiv2

Tworzenie Controllera
nest generate controller dishes

=== Controller ===
- ma za zadanie zwalidowac dane wejściowe
- zapukać do odpowiednego serwisu
- zwrócić wartość

============= DTO ========
npm i --save class-validator class-transformer
instalacja "class walidatora" czyli możliwość uzycia poprawności danych które wpadają z requestami np. ValidationPipe, ParseIntPipe etc.. Uzywane w klasie DTO
Aby walidacja była aktywna, trzeba w pliku main.ts dopisac:
app.useGlobalPipes(new ValidationPipe())
Zmiana komunikatu błędu:
W klasie DTO np. w @IsNumber({}, { message: 'Servings must be provided'})

npm i @nestjs/mapped-types
Paczka, kótra pozwoli na uzycie np. OmitType (używane np. w DTO'sach)

=== EXCEPTIONS ====
NestJs ma wbudowany ENUM: np. HttpStatus.NOT_FOUND

ParseIntPipe - rzutowanie przy wyciąganiu parametru z body (dopisywane w Param())

Tworzenie warstwy serwisowej
nest g service dish --dry-run (--dry-run robi tylko symulację, nie tworzy plików)
nest g service dish --flat (--flat nie tworzy podfolderu dla serwisu tylko tworzy pliki tam gdzie został wywołany)

--- Jedna instancja Serwisu dla wszystkich zapytań -----
--- Dependency injection ------
Aby uniknąć problemu kilku miejsc w pamięci dla np. warstwy serwisowej i tablicy "Dish", można dodac w konstruktorze Kontrolera:
User story:
Podczas dodwania produktu chcę sprawdzić czy istnieje danie. Dlatego instancję "dishService" dodaję do konstruktora (opisane poniżej). 
Musi tu byc sprawdzenie "krzyżowe" - użyciue tutaj wzorca projektowego "singleton".

1.
private dishService;
constructor(dishService: DishService)
2. Trzeba dopisać w app.module.ts dopisac oba serwisy:
providers: [DishService, ProductService],

w klasie product.controller.ts:
  private productService;
  constructor(productService: ProductService) {
    this.productService = productService;
  }

lub krócej:
  constructor( private productService: ProductService) {
    this.productService = productService;
  }

  oraz w dishes.controler:
    constructor(private dishService: DishService) {}

aby to była ta sama instancja    

==== Zależność między serwisami ==========
załozenie przykładu: chemy pobrać wszytskie produkty z dania
- do interfejsu Dish dopisujemy:
products: Product[]
- poprawiamy (dopisujemy) products = []
- tworzymy metode - tutaj getAllForDishId()
- podczs uruchomienia NestaJs mamy bład "Nest can't resolve dependencies of the ProductService (?)" bo DishService jest zalezy od productservice i odwrotnie. Nie wiadomo co ma być pierwsze.
sam wpis w app.module.ts i providersp[ ] nie wystarczy.
Trzeba użyć "forwardRef" z @nestjs/common z dekoratorem @inject

  constructor(
    @Inject(forwardRef(() => DishService)) private dishService: DishService,
  ) {}

  === Dodatkowe moduły ====
  nest g module recipe (w lokalizacji .../src/)
  jest to "featcher module" czyli uzupełnia główny moduł. 
  Trzeba tutaj zrović refactoring kodu czyli przenieśćdish i products do "recipe"
  - przenieść wpisy z głównejgo app.module do recipe.module.ts
  